import logging
import sys
from unittest import TestCase

import numpy as np

from src.Utils.Types.OptionType import OptionType
from src.Utils.Valuator.Black76 import Black76Vec
from src.Utils.Valuator.VarianceReplication import VarianceReplication

__author__ = 'frank.ma'

logger = logging.getLogger()
logger.setLevel(logging.INFO)
formatter = logging.Formatter('%(asctime)s - %(name)s - %(levelname)s - %(message)s')

sh = logging.StreamHandler()
sh.setLevel(logging.DEBUG)
sh.setFormatter(formatter)
logger.addHandler(sh)


class TestVarianceReplication(TestCase):
    def test_calc_variance(self):
        logger.info('%s starts' % sys._getframe().f_code.co_name)
        # CBOE VIX white paper samples
        k_c = [800, 900, 1000, 1050, 1100, 1125, 1150, 1175, 1200, 1220, 1225, 1240, 1250, 1260, 1270, 1275, 1280, 1290,
               1300, 1305, 1310, 1315, 1320, 1325, 1330, 1335, 1340, 1345, 1350, 1355, 1360, 1365, 1370, 1375, 1380,
               1385, 1390, 1395, 1400, 1405, 1410, 1415, 1420, 1425, 1430, 1435, 1440, 1445, 1450, 1455, 1460, 1465,
               1470, 1475, 1480, 1485, 1490, 1495, 1500, 1505, 1510, 1515, 1520, 1525, 1530, 1535, 1540, 1545, 1550,
               1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590, 1595, 1600, 1605, 1610, 1615, 1620, 1625, 1630, 1635,
               1640, 1645, 1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695, 1700, 1705, 1710, 1715, 1720,
               1725, 1730, 1735, 1740, 1745, 1750, 1755, 1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795, 1800, 1805,
               1810, 1815, 1820, 1825, 1830, 1835, 1840, 1845, 1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885, 1890,
               1895, 1900, 1905, 1910, 1915, 1920, 1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970, 1975,
               1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2055, 2060,
               2065, 2070, 2075, 2080, 2085, 2090, 2095, 2100, 2125]
        v_c = [1162.65, 1062.7, 962.75, 912.75, 862.8, 837.8, 812.8, 787.85, 762.85, 742.85, 737.85, 722.85, 712.85,
               702.85, 692.85, 687.85, 682.85, 672.9, 662.9, 657.9, 652.9, 647.9, 642.95, 637.95, 632.95, 627.95,
               622.95, 617.95, 612.95, 607.95, 602.95, 597.95, 592.95, 587.95, 582.95, 577.95, 572.95, 567.95, 563, 558,
               553, 548, 543, 538.05, 533.05, 528.05, 523.05, 518.05, 513.05, 508.05, 503.05, 498.05, 493.05, 488.1,
               483.1, 478.1, 473.1, 468.15, 463.15, 458.15, 453.15, 448.15, 443.2, 438.2, 433.2, 428.2, 423.2, 418.25,
               413.25, 408.3, 403.3, 398.3, 393.3, 388.3, 383.3, 378.4, 373.4, 368.4, 363.4, 358.45, 353.45, 348.5,
               343.5, 338.55, 333.55, 328.55, 323.6, 318.65, 313.65, 308.65, 303.75, 298.75, 293.8, 288.85, 283.85,
               278.9, 273.95, 269, 264, 259.1, 254.1, 249.2, 244.2, 239.3, 234.35, 229.4, 224.45, 219.55, 214.6, 209.65,
               204.75, 199.8, 194.9, 190, 185.1, 180.2, 175.3, 170.4, 165.5, 160.6, 155.8, 150.9, 146.1, 141.25, 136.4,
               131.6, 126.8, 122.1, 117.35, 112.6, 107.9, 103.25, 98.55, 93.95, 89.35, 84.8, 80.3, 75.85, 71.4, 67.25,
               62.85, 58.6, 54.45, 50.15, 46.25, 42.3, 38.45, 34.7, 31.1, 27.6, 24.25, 21.05, 18.1, 15.25, 12.75, 10.45,
               8.45, 6.65, 4.95, 3.8, 2.875, 2.025, 1.45, 1.125, 0.725, 0.525, 0.5, 0.4, 0.25, 0.325, 0.225, 0.175,
               0.15, 0.15, 0.25, 0.225, 0.1, 0.2, 0.1, 0.1]

        k_p = [1370, 1375, 1380, 1385, 1390, 1395, 1400, 1410, 1420, 1425, 1430, 1435, 1440, 1445, 1450, 1455, 1460,
               1465, 1470, 1475, 1480, 1485, 1490, 1495, 1500, 1505, 1510, 1515, 1520, 1525, 1530, 1535, 1540, 1545,
               1550, 1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590, 1595, 1600, 1605, 1610, 1615, 1620, 1625, 1630,
               1635, 1640, 1645, 1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695, 1700, 1705, 1710, 1715,
               1720, 1725, 1730, 1735, 1740, 1745, 1750, 1755, 1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795, 1800,
               1805, 1810, 1815, 1820, 1825, 1830, 1835, 1840, 1845, 1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885,
               1890, 1895, 1900, 1905, 1910, 1915, 1920, 1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970,
               1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2055,
               2060, 2065, 2070, 2075, 2080, 2085, 2090, 2095, 2100, 2120, 2125, 2150, 2175, 2200, 2225, 2250]
        v_p = [0.2, 0.125, 0.15, 0.225, 0.225, 0.125, 0.125, 0.225, 0.225, 0.175, 0.225, 0.275, 0.175, 0.225, 0.2, 0.25,
               0.25, 0.25, 0.25, 0.2, 0.25, 0.35, 0.175, 0.275, 0.325, 0.325, 0.3, 0.3, 0.35, 0.35, 0.325, 0.375, 0.375,
               0.375, 0.5, 0.425, 0.425, 0.425, 0.475, 0.55, 0.525, 0.525, 0.525, 0.525, 0.675, 0.575, 0.625, 0.625,
               0.625, 0.675, 0.675, 0.725, 0.725, 0.775, 0.675, 0.825, 0.825, 0.875, 0.875, 0.925, 0.975, 1.025, 1.025,
               1.075, 1.125, 1.125, 1.175, 1.225, 1.275, 1.325, 1.375, 1.425, 1.475, 1.55, 1.6, 1.675, 1.75, 1.825, 1.9,
               2, 2.075, 2.175, 2.25, 2.375, 2.525, 2.625, 2.775, 2.95, 3.075, 3.3, 3.45, 3.65, 3.9, 4.1, 4.35, 4.65,
               4.95, 5.25, 5.6, 6, 6.4, 6.85, 7.35, 7.9, 8.3, 9, 9.65, 10.6, 11.4, 12.1, 13.25, 14.15, 15.25, 16.55,
               18.25, 19.75, 21.3, 23.15, 25.05, 27.3, 29.75, 32.3, 35.4, 38.55, 41.95, 45.85, 49.7, 54.1, 58.5, 63.1,
               67.8, 72.55, 77.45, 82.3, 87.2, 92.2, 97.1, 102.1, 107.1, 112.05, 117.05, 122.05, 127.05, 132.05, 137.05,
               157.05, 162.05, 187, 211.95, 236.95, 261.95, 286.95]

        tau = 0.0683486
        rf = 0.000305
        b = np.exp(-rf * tau)
        f = 1960.0
        vr = VarianceReplication(tau, f, b, np.array(k_p), np.array(v_p), np.array(k_c), np.array(v_c))
        variance = vr.calc_variance()
        self.assertAlmostEqual(0.018494953, variance, places=3)

        k_c = [1225, 1250, 1275, 1300, 1325, 1350, 1375, 1400, 1425, 1450, 1475, 1500, 1510, 1520, 1525, 1530, 1540,
               1550, 1555, 1560, 1565, 1570, 1575, 1580, 1585, 1590, 1595, 1600, 1605, 1610, 1615, 1620, 1625, 1630,
               1635, 1640, 1645, 1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695, 1700, 1705, 1710, 1715,
               1720, 1725, 1730, 1735, 1740, 1745, 1750, 1755, 1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795, 1800,
               1805, 1810, 1815, 1820, 1825, 1830, 1835, 1840, 1845, 1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885,
               1890, 1895, 1900, 1905, 1910, 1915, 1920, 1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970,
               1975, 1980, 1985, 1990, 1995, 2000, 2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2060,
               2070, 2075, 2100, 2125, 2150, 2200]
        v_c = [737.35, 712.3, 687.35, 662.35, 637.25, 612.25, 587.3, 562.35, 537.4, 512.45, 487.5, 462.6, 452.65,
               442.65, 437.7, 432.7, 422.75, 412.8, 407.8, 402.8, 397.85, 392.6, 387.9, 382.9, 377.95, 372.7, 368, 363,
               358.05, 353.1, 348.1, 343.15, 338.15, 333.2, 328.25, 323.3, 318.3, 313.35, 308.4, 303.45, 298.5, 293.55,
               288.55, 283.65, 278.7, 273.75, 268.8, 263.85, 258.9, 253.95, 249.05, 244.1, 239.2, 234.25, 229.35,
               224.35, 219.45, 214.55, 209.65, 204.75, 199.85, 194.95, 190.15, 185.05, 180.15, 175.35, 170.45, 165.65,
               160.85, 156, 151.25, 146.45, 141.65, 136.95, 132.2, 127.5, 122.8, 118.1, 113.5, 108.9, 104.3, 99.7, 95.2,
               90.7, 86.2, 81.8, 77.45, 73.05, 68.8, 64.6, 60.45, 56.35, 52.35, 48.45, 44.85, 41.05, 37.45, 34.05, 30.6,
               27.3, 24.15, 21.1, 18.3, 15.7, 13.3, 11.1, 9.15, 7.4, 5.85, 4.65, 3.55, 2.7, 2.05, 1.55, 1.15, 0.875,
               0.675, 0.575, 0.35, 0.25, 0.2, 0.15, 0.1, 0.1, 0.075]

        k_p = [1275, 1325, 1350, 1375, 1400, 1425, 1450, 1475, 1500, 1510, 1520, 1525, 1530, 1540, 1550, 1555, 1560,
               1565, 1570, 1575, 1580, 1585, 1590, 1595, 1600, 1605, 1610, 1615, 1620, 1625, 1630, 1635, 1640, 1645,
               1650, 1655, 1660, 1665, 1670, 1675, 1680, 1685, 1690, 1695, 1700, 1705, 1710, 1715, 1720, 1725, 1730,
               1735, 1740, 1745, 1750, 1755, 1760, 1765, 1770, 1775, 1780, 1785, 1790, 1795, 1800, 1805, 1810, 1815,
               1820, 1825, 1830, 1835, 1840, 1845, 1850, 1855, 1860, 1865, 1870, 1875, 1880, 1885, 1890, 1895, 1900,
               1905, 1910, 1915, 1920, 1925, 1930, 1935, 1940, 1945, 1950, 1955, 1960, 1965, 1970, 1975, 1980, 1985,
               1990, 1995, 2000, 2005, 2010, 2015, 2020, 2025, 2030, 2035, 2040, 2045, 2050, 2060, 2070, 2075, 2100,
               2125, 2150, 2175, 2200, 2225, 2250]
        v_p = [0.075, 0.15, 0.15, 0.175, 0.2, 0.25, 0.3, 0.35, 0.4, 0.425, 0.45, 0.475, 0.5, 0.525, 0.55, 0.575, 0.6,
               0.625, 0.65, 0.675, 0.675, 0.7, 0.725, 0.75, 0.775, 0.8, 0.825, 0.85, 0.875, 0.9, 0.95, 0.975, 1, 1.025,
               1.075, 1.1, 1.15, 1.2, 1.225, 1.275, 1.325, 1.375, 1.425, 1.475, 1.525, 1.6, 1.675, 1.725, 1.8, 1.85,
               1.925, 2, 2.1, 2.175, 2.275, 2.375, 2.475, 2.575, 2.725, 2.825, 3, 3.1, 3.25, 3.45, 3.6, 3.8, 3.95, 4.2,
               4.4, 4.65, 4.9, 5.15, 5.45, 5.75, 6.05, 6.45, 6.75, 7.15, 7.65, 8.15, 8.6, 9.2, 9.75, 10.4, 11.1, 11.8,
               12.6, 13.45, 14.4, 15.4, 16.4, 17.6, 18.8, 20.2, 21.6, 23.2, 24.9, 26.9, 28.95, 31.05, 33.5, 36.05,
               38.95, 41.9, 45.15, 48.7, 52.35, 56.4, 60.8, 65.1, 69.6, 74.25, 79, 83.4, 88.25, 98, 108.1, 113.1, 137.7,
               162.9, 187.65, 212.65, 237.65, 262.65, 287.65]

        tau = 0.0882686
        rf = 0.000286
        b = np.exp(-rf * tau)
        f = 1960.0
        vr = VarianceReplication(tau, f, b, np.array(k_p), np.array(v_p), np.array(k_c), np.array(v_c))
        variance = vr.calc_variance()
        self.assertAlmostEqual(0.018837995, variance, places=3)

        logger.info('%s passes' % sys._getframe().f_code.co_name)
        pass

    def test_flat_vol(self):
        logger.info('%s starts' % sys._getframe().f_code.co_name)

        tau = 5.0  # 30.0
        b = 0.88
        fwd = 150.0
        flat_vols = np.linspace(0.1, 1.0, num=10)

        for flat_vol in flat_vols:
            scale = fwd * flat_vol * np.sqrt(tau)
            strikes = np.linspace(0.00001 * scale, 100.0 * scale, num=10 ** 6)
            prices_call = Black76Vec.price(fwd, strikes, tau, flat_vol, b, OptionType.call)
            prices_put = Black76Vec.price(fwd, strikes, tau, flat_vol, b, OptionType.put)

            rp = VarianceReplication(tau, fwd, b, strikes, prices_put, strikes, prices_call)
            var = rp.calc_variance()
            std = np.sqrt(var)
            self.assertAlmostEqual(std, flat_vol, places=4, msg='replication failed at vol %2.f' % flat_vol)
            logger.info('%.2f\t%.12f\t%.2e' % (flat_vol, std, float(std / flat_vol - 1.0)))

        logger.info('%s passes' % sys._getframe().f_code.co_name)
        pass
